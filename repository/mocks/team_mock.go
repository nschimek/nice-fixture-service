// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	model "github.com/nschimek/nice-fixture-service/model"
	mock "github.com/stretchr/testify/mock"
)

// Team is an autogenerated mock type for the Team type
type Team struct {
	mock.Mock
}

type Team_Expecter struct {
	mock *mock.Mock
}

func (_m *Team) EXPECT() *Team_Expecter {
	return &Team_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields:
func (_m *Team) GetAll() ([]model.Team, error) {
	ret := _m.Called()

	var r0 []model.Team
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Team, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Team)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Team_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Team_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *Team_Expecter) GetAll() *Team_GetAll_Call {
	return &Team_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *Team_GetAll_Call) Run(run func()) *Team_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Team_GetAll_Call) Return(_a0 []model.Team, _a1 error) *Team_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Team_GetAll_Call) RunAndReturn(run func() ([]model.Team, error)) *Team_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByLeagueSeason provides a mock function with given fields: tls
func (_m *Team) GetAllByLeagueSeason(tls *model.TeamLeagueSeason) ([]model.Team, error) {
	ret := _m.Called(tls)

	var r0 []model.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.TeamLeagueSeason) ([]model.Team, error)); ok {
		return rf(tls)
	}
	if rf, ok := ret.Get(0).(func(*model.TeamLeagueSeason) []model.Team); ok {
		r0 = rf(tls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.TeamLeagueSeason) error); ok {
		r1 = rf(tls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Team_GetAllByLeagueSeason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByLeagueSeason'
type Team_GetAllByLeagueSeason_Call struct {
	*mock.Call
}

// GetAllByLeagueSeason is a helper method to define mock.On call
//   - tls *model.TeamLeagueSeason
func (_e *Team_Expecter) GetAllByLeagueSeason(tls interface{}) *Team_GetAllByLeagueSeason_Call {
	return &Team_GetAllByLeagueSeason_Call{Call: _e.mock.On("GetAllByLeagueSeason", tls)}
}

func (_c *Team_GetAllByLeagueSeason_Call) Run(run func(tls *model.TeamLeagueSeason)) *Team_GetAllByLeagueSeason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TeamLeagueSeason))
	})
	return _c
}

func (_c *Team_GetAllByLeagueSeason_Call) Return(_a0 []model.Team, _a1 error) *Team_GetAllByLeagueSeason_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Team_GetAllByLeagueSeason_Call) RunAndReturn(run func(*model.TeamLeagueSeason) ([]model.Team, error)) *Team_GetAllByLeagueSeason_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *Team) GetById(id int) (*model.Team, error) {
	ret := _m.Called(id)

	var r0 *model.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Team, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Team); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Team_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type Team_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id int
func (_e *Team_Expecter) GetById(id interface{}) *Team_GetById_Call {
	return &Team_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *Team_GetById_Call) Run(run func(id int)) *Team_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Team_GetById_Call) Return(_a0 *model.Team, _a1 error) *Team_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Team_GetById_Call) RunAndReturn(run func(int) (*model.Team, error)) *Team_GetById_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTeam interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeam creates a new instance of Team. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeam(t mockConstructorTestingTNewTeam) *Team {
	mock := &Team{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
