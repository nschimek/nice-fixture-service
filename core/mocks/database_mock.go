// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	core "github.com/nschimek/nice-fixture-service/core"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// FindByQuery provides a mock function with given fields: dest, query, binds
func (_m *Database) FindByQuery(dest interface{}, query string, binds ...interface{}) core.DatabaseResult {
	var _ca []interface{}
	_ca = append(_ca, dest, query)
	_ca = append(_ca, binds...)
	ret := _m.Called(_ca...)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) core.DatabaseResult); ok {
		r0 = rf(dest, query, binds...)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_FindByQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByQuery'
type Database_FindByQuery_Call struct {
	*mock.Call
}

// FindByQuery is a helper method to define mock.On call
//   - dest interface{}
//   - query string
//   - binds ...interface{}
func (_e *Database_Expecter) FindByQuery(dest interface{}, query interface{}, binds ...interface{}) *Database_FindByQuery_Call {
	return &Database_FindByQuery_Call{Call: _e.mock.On("FindByQuery",
		append([]interface{}{dest, query}, binds...)...)}
}

func (_c *Database_FindByQuery_Call) Run(run func(dest interface{}, query string, binds ...interface{})) *Database_FindByQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Database_FindByQuery_Call) Return(_a0 core.DatabaseResult) *Database_FindByQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_FindByQuery_Call) RunAndReturn(run func(interface{}, string, ...interface{}) core.DatabaseResult) *Database_FindByQuery_Call {
	_c.Call.Return(run)
	return _c
}

// FindByStruct provides a mock function with given fields: dest, where
func (_m *Database) FindByStruct(dest interface{}, where interface{}) core.DatabaseResult {
	ret := _m.Called(dest, where)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) core.DatabaseResult); ok {
		r0 = rf(dest, where)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_FindByStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStruct'
type Database_FindByStruct_Call struct {
	*mock.Call
}

// FindByStruct is a helper method to define mock.On call
//   - dest interface{}
//   - where interface{}
func (_e *Database_Expecter) FindByStruct(dest interface{}, where interface{}) *Database_FindByStruct_Call {
	return &Database_FindByStruct_Call{Call: _e.mock.On("FindByStruct", dest, where)}
}

func (_c *Database_FindByStruct_Call) Run(run func(dest interface{}, where interface{})) *Database_FindByStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *Database_FindByStruct_Call) Return(_a0 core.DatabaseResult) *Database_FindByStruct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_FindByStruct_Call) RunAndReturn(run func(interface{}, interface{}) core.DatabaseResult) *Database_FindByStruct_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: dest
func (_m *Database) GetAll(dest interface{}) core.DatabaseResult {
	ret := _m.Called(dest)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}) core.DatabaseResult); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Database_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - dest interface{}
func (_e *Database_Expecter) GetAll(dest interface{}) *Database_GetAll_Call {
	return &Database_GetAll_Call{Call: _e.mock.On("GetAll", dest)}
}

func (_c *Database_GetAll_Call) Run(run func(dest interface{})) *Database_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Database_GetAll_Call) Return(_a0 core.DatabaseResult) *Database_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetAll_Call) RunAndReturn(run func(interface{}) core.DatabaseResult) *Database_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id, dest
func (_m *Database) GetById(id interface{}, dest interface{}) core.DatabaseResult {
	ret := _m.Called(id, dest)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) core.DatabaseResult); ok {
		r0 = rf(id, dest)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type Database_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id interface{}
//   - dest interface{}
func (_e *Database_Expecter) GetById(id interface{}, dest interface{}) *Database_GetById_Call {
	return &Database_GetById_Call{Call: _e.mock.On("GetById", id, dest)}
}

func (_c *Database_GetById_Call) Run(run func(id interface{}, dest interface{})) *Database_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *Database_GetById_Call) Return(_a0 core.DatabaseResult) *Database_GetById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GetById_Call) RunAndReturn(run func(interface{}, interface{}) core.DatabaseResult) *Database_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Gorm provides a mock function with given fields:
func (_m *Database) Gorm() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Database_Gorm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gorm'
type Database_Gorm_Call struct {
	*mock.Call
}

// Gorm is a helper method to define mock.On call
func (_e *Database_Expecter) Gorm() *Database_Gorm_Call {
	return &Database_Gorm_Call{Call: _e.mock.On("Gorm")}
}

func (_c *Database_Gorm_Call) Run(run func()) *Database_Gorm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Gorm_Call) Return(_a0 *gorm.DB) *Database_Gorm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Gorm_Call) RunAndReturn(run func() *gorm.DB) *Database_Gorm_Call {
	_c.Call.Return(run)
	return _c
}

// GroupBy provides a mock function with given fields: dest, model, selectFields, groupBy
func (_m *Database) GroupBy(dest interface{}, model interface{}, selectFields string, groupBy string) core.DatabaseResult {
	ret := _m.Called(dest, model, selectFields, groupBy)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, string, string) core.DatabaseResult); ok {
		r0 = rf(dest, model, selectFields, groupBy)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_GroupBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupBy'
type Database_GroupBy_Call struct {
	*mock.Call
}

// GroupBy is a helper method to define mock.On call
//   - dest interface{}
//   - model interface{}
//   - selectFields string
//   - groupBy string
func (_e *Database_Expecter) GroupBy(dest interface{}, model interface{}, selectFields interface{}, groupBy interface{}) *Database_GroupBy_Call {
	return &Database_GroupBy_Call{Call: _e.mock.On("GroupBy", dest, model, selectFields, groupBy)}
}

func (_c *Database_GroupBy_Call) Run(run func(dest interface{}, model interface{}, selectFields string, groupBy string)) *Database_GroupBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Database_GroupBy_Call) Return(_a0 core.DatabaseResult) *Database_GroupBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GroupBy_Call) RunAndReturn(run func(interface{}, interface{}, string, string) core.DatabaseResult) *Database_GroupBy_Call {
	_c.Call.Return(run)
	return _c
}

// InnerJoin provides a mock function with given fields: dest, joinTable, query
func (_m *Database) InnerJoin(dest interface{}, joinTable string, query interface{}) core.DatabaseResult {
	ret := _m.Called(dest, joinTable, query)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, string, interface{}) core.DatabaseResult); ok {
		r0 = rf(dest, joinTable, query)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_InnerJoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InnerJoin'
type Database_InnerJoin_Call struct {
	*mock.Call
}

// InnerJoin is a helper method to define mock.On call
//   - dest interface{}
//   - joinTable string
//   - query interface{}
func (_e *Database_Expecter) InnerJoin(dest interface{}, joinTable interface{}, query interface{}) *Database_InnerJoin_Call {
	return &Database_InnerJoin_Call{Call: _e.mock.On("InnerJoin", dest, joinTable, query)}
}

func (_c *Database_InnerJoin_Call) Run(run func(dest interface{}, joinTable string, query interface{})) *Database_InnerJoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Database_InnerJoin_Call) Return(_a0 core.DatabaseResult) *Database_InnerJoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_InnerJoin_Call) RunAndReturn(run func(interface{}, string, interface{}) core.DatabaseResult) *Database_InnerJoin_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: dest, joinTable, query
func (_m *Database) Join(dest interface{}, joinTable string, query interface{}) core.DatabaseResult {
	ret := _m.Called(dest, joinTable, query)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, string, interface{}) core.DatabaseResult); ok {
		r0 = rf(dest, joinTable, query)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type Database_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - dest interface{}
//   - joinTable string
//   - query interface{}
func (_e *Database_Expecter) Join(dest interface{}, joinTable interface{}, query interface{}) *Database_Join_Call {
	return &Database_Join_Call{Call: _e.mock.On("Join", dest, joinTable, query)}
}

func (_c *Database_Join_Call) Run(run func(dest interface{}, joinTable string, query interface{})) *Database_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Database_Join_Call) Return(_a0 core.DatabaseResult) *Database_Join_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Join_Call) RunAndReturn(run func(interface{}, string, interface{}) core.DatabaseResult) *Database_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Preload provides a mock function with given fields: dest, where, joinField, joinWhere
func (_m *Database) Preload(dest interface{}, where interface{}, joinField string, joinWhere interface{}) core.DatabaseResult {
	ret := _m.Called(dest, where, joinField, joinWhere)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, string, interface{}) core.DatabaseResult); ok {
		r0 = rf(dest, where, joinField, joinWhere)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_Preload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preload'
type Database_Preload_Call struct {
	*mock.Call
}

// Preload is a helper method to define mock.On call
//   - dest interface{}
//   - where interface{}
//   - joinField string
//   - joinWhere interface{}
func (_e *Database_Expecter) Preload(dest interface{}, where interface{}, joinField interface{}, joinWhere interface{}) *Database_Preload_Call {
	return &Database_Preload_Call{Call: _e.mock.On("Preload", dest, where, joinField, joinWhere)}
}

func (_c *Database_Preload_Call) Run(run func(dest interface{}, where interface{}, joinField string, joinWhere interface{})) *Database_Preload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *Database_Preload_Call) Return(_a0 core.DatabaseResult) *Database_Preload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Preload_Call) RunAndReturn(run func(interface{}, interface{}, string, interface{}) core.DatabaseResult) *Database_Preload_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: value
func (_m *Database) Save(value interface{}) core.DatabaseResult {
	ret := _m.Called(value)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}) core.DatabaseResult); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Database_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - value interface{}
func (_e *Database_Expecter) Save(value interface{}) *Database_Save_Call {
	return &Database_Save_Call{Call: _e.mock.On("Save", value)}
}

func (_c *Database_Save_Call) Run(run func(value interface{})) *Database_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Database_Save_Call) Return(_a0 core.DatabaseResult) *Database_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Save_Call) RunAndReturn(run func(interface{}) core.DatabaseResult) *Database_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: value
func (_m *Database) Upsert(value interface{}) core.DatabaseResult {
	ret := _m.Called(value)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}) core.DatabaseResult); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// Database_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type Database_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - value interface{}
func (_e *Database_Expecter) Upsert(value interface{}) *Database_Upsert_Call {
	return &Database_Upsert_Call{Call: _e.mock.On("Upsert", value)}
}

func (_c *Database_Upsert_Call) Run(run func(value interface{})) *Database_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Database_Upsert_Call) Return(_a0 core.DatabaseResult) *Database_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Upsert_Call) RunAndReturn(run func(interface{}) core.DatabaseResult) *Database_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
